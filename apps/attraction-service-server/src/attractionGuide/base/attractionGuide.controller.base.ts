/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { AttractionGuideService } from "../attractionGuide.service";
import { AttractionGuideCreateInput } from "./AttractionGuideCreateInput";
import { AttractionGuide } from "./AttractionGuide";
import { AttractionGuideFindManyArgs } from "./AttractionGuideFindManyArgs";
import { AttractionGuideWhereUniqueInput } from "./AttractionGuideWhereUniqueInput";
import { AttractionGuideUpdateInput } from "./AttractionGuideUpdateInput";

export class AttractionGuideControllerBase {
  constructor(protected readonly service: AttractionGuideService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: AttractionGuide })
  async createAttractionGuide(
    @common.Body() data: AttractionGuideCreateInput
  ): Promise<AttractionGuide> {
    return await this.service.createAttractionGuide({
      data: data,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [AttractionGuide] })
  @ApiNestedQuery(AttractionGuideFindManyArgs)
  async attractionGuides(
    @common.Req() request: Request
  ): Promise<AttractionGuide[]> {
    const args = plainToClass(AttractionGuideFindManyArgs, request.query);
    return this.service.attractionGuides({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: AttractionGuide })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async attractionGuide(
    @common.Param() params: AttractionGuideWhereUniqueInput
  ): Promise<AttractionGuide | null> {
    const result = await this.service.attractionGuide({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: AttractionGuide })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateAttractionGuide(
    @common.Param() params: AttractionGuideWhereUniqueInput,
    @common.Body() data: AttractionGuideUpdateInput
  ): Promise<AttractionGuide | null> {
    try {
      return await this.service.updateAttractionGuide({
        where: params,
        data: data,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: AttractionGuide })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteAttractionGuide(
    @common.Param() params: AttractionGuideWhereUniqueInput
  ): Promise<AttractionGuide | null> {
    try {
      return await this.service.deleteAttractionGuide({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
