/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { AttractionGuide } from "./AttractionGuide";
import { AttractionGuideCountArgs } from "./AttractionGuideCountArgs";
import { AttractionGuideFindManyArgs } from "./AttractionGuideFindManyArgs";
import { AttractionGuideFindUniqueArgs } from "./AttractionGuideFindUniqueArgs";
import { DeleteAttractionGuideArgs } from "./DeleteAttractionGuideArgs";
import { AttractionGuideService } from "../attractionGuide.service";
@graphql.Resolver(() => AttractionGuide)
export class AttractionGuideResolverBase {
  constructor(protected readonly service: AttractionGuideService) {}

  async _attractionGuidesMeta(
    @graphql.Args() args: AttractionGuideCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [AttractionGuide])
  async attractionGuides(
    @graphql.Args() args: AttractionGuideFindManyArgs
  ): Promise<AttractionGuide[]> {
    return this.service.attractionGuides(args);
  }

  @graphql.Query(() => AttractionGuide, { nullable: true })
  async attractionGuide(
    @graphql.Args() args: AttractionGuideFindUniqueArgs
  ): Promise<AttractionGuide | null> {
    const result = await this.service.attractionGuide(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => AttractionGuide)
  async deleteAttractionGuide(
    @graphql.Args() args: DeleteAttractionGuideArgs
  ): Promise<AttractionGuide | null> {
    try {
      return await this.service.deleteAttractionGuide(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
