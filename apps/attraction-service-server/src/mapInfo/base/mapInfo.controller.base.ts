/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { MapInfoService } from "../mapInfo.service";
import { MapInfoCreateInput } from "./MapInfoCreateInput";
import { MapInfo } from "./MapInfo";
import { MapInfoFindManyArgs } from "./MapInfoFindManyArgs";
import { MapInfoWhereUniqueInput } from "./MapInfoWhereUniqueInput";
import { MapInfoUpdateInput } from "./MapInfoUpdateInput";

export class MapInfoControllerBase {
  constructor(protected readonly service: MapInfoService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: MapInfo })
  async createMapInfo(
    @common.Body() data: MapInfoCreateInput
  ): Promise<MapInfo> {
    return await this.service.createMapInfo({
      data: data,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [MapInfo] })
  @ApiNestedQuery(MapInfoFindManyArgs)
  async mapInfos(@common.Req() request: Request): Promise<MapInfo[]> {
    const args = plainToClass(MapInfoFindManyArgs, request.query);
    return this.service.mapInfos({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: MapInfo })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async mapInfo(
    @common.Param() params: MapInfoWhereUniqueInput
  ): Promise<MapInfo | null> {
    const result = await this.service.mapInfo({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: MapInfo })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateMapInfo(
    @common.Param() params: MapInfoWhereUniqueInput,
    @common.Body() data: MapInfoUpdateInput
  ): Promise<MapInfo | null> {
    try {
      return await this.service.updateMapInfo({
        where: params,
        data: data,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: MapInfo })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteMapInfo(
    @common.Param() params: MapInfoWhereUniqueInput
  ): Promise<MapInfo | null> {
    try {
      return await this.service.deleteMapInfo({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
