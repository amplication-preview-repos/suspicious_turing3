/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { MapInfo } from "./MapInfo";
import { MapInfoCountArgs } from "./MapInfoCountArgs";
import { MapInfoFindManyArgs } from "./MapInfoFindManyArgs";
import { MapInfoFindUniqueArgs } from "./MapInfoFindUniqueArgs";
import { DeleteMapInfoArgs } from "./DeleteMapInfoArgs";
import { MapInfoService } from "../mapInfo.service";
@graphql.Resolver(() => MapInfo)
export class MapInfoResolverBase {
  constructor(protected readonly service: MapInfoService) {}

  async _mapInfosMeta(
    @graphql.Args() args: MapInfoCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [MapInfo])
  async mapInfos(
    @graphql.Args() args: MapInfoFindManyArgs
  ): Promise<MapInfo[]> {
    return this.service.mapInfos(args);
  }

  @graphql.Query(() => MapInfo, { nullable: true })
  async mapInfo(
    @graphql.Args() args: MapInfoFindUniqueArgs
  ): Promise<MapInfo | null> {
    const result = await this.service.mapInfo(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => MapInfo)
  async deleteMapInfo(
    @graphql.Args() args: DeleteMapInfoArgs
  ): Promise<MapInfo | null> {
    try {
      return await this.service.deleteMapInfo(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
