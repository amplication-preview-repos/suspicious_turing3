/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, AudioGuideFile as PrismaAudioGuideFile } from "@prisma/client";

export class AudioGuideFileServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.AudioGuideFileCountArgs, "select">
  ): Promise<number> {
    return this.prisma.audioGuideFile.count(args);
  }

  async audioGuideFiles(
    args: Prisma.AudioGuideFileFindManyArgs
  ): Promise<PrismaAudioGuideFile[]> {
    return this.prisma.audioGuideFile.findMany(args);
  }
  async audioGuideFile(
    args: Prisma.AudioGuideFileFindUniqueArgs
  ): Promise<PrismaAudioGuideFile | null> {
    return this.prisma.audioGuideFile.findUnique(args);
  }
  async createAudioGuideFile(
    args: Prisma.AudioGuideFileCreateArgs
  ): Promise<PrismaAudioGuideFile> {
    return this.prisma.audioGuideFile.create(args);
  }
  async updateAudioGuideFile(
    args: Prisma.AudioGuideFileUpdateArgs
  ): Promise<PrismaAudioGuideFile> {
    return this.prisma.audioGuideFile.update(args);
  }
  async deleteAudioGuideFile(
    args: Prisma.AudioGuideFileDeleteArgs
  ): Promise<PrismaAudioGuideFile> {
    return this.prisma.audioGuideFile.delete(args);
  }
}
