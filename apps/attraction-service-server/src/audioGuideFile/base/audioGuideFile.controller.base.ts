/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { AudioGuideFileService } from "../audioGuideFile.service";
import { AudioGuideFileCreateInput } from "./AudioGuideFileCreateInput";
import { AudioGuideFile } from "./AudioGuideFile";
import { AudioGuideFileFindManyArgs } from "./AudioGuideFileFindManyArgs";
import { AudioGuideFileWhereUniqueInput } from "./AudioGuideFileWhereUniqueInput";
import { AudioGuideFileUpdateInput } from "./AudioGuideFileUpdateInput";

export class AudioGuideFileControllerBase {
  constructor(protected readonly service: AudioGuideFileService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: AudioGuideFile })
  async createAudioGuideFile(
    @common.Body() data: AudioGuideFileCreateInput
  ): Promise<AudioGuideFile> {
    return await this.service.createAudioGuideFile({
      data: data,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [AudioGuideFile] })
  @ApiNestedQuery(AudioGuideFileFindManyArgs)
  async audioGuideFiles(
    @common.Req() request: Request
  ): Promise<AudioGuideFile[]> {
    const args = plainToClass(AudioGuideFileFindManyArgs, request.query);
    return this.service.audioGuideFiles({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: AudioGuideFile })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async audioGuideFile(
    @common.Param() params: AudioGuideFileWhereUniqueInput
  ): Promise<AudioGuideFile | null> {
    const result = await this.service.audioGuideFile({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: AudioGuideFile })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateAudioGuideFile(
    @common.Param() params: AudioGuideFileWhereUniqueInput,
    @common.Body() data: AudioGuideFileUpdateInput
  ): Promise<AudioGuideFile | null> {
    try {
      return await this.service.updateAudioGuideFile({
        where: params,
        data: data,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: AudioGuideFile })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteAudioGuideFile(
    @common.Param() params: AudioGuideFileWhereUniqueInput
  ): Promise<AudioGuideFile | null> {
    try {
      return await this.service.deleteAudioGuideFile({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
