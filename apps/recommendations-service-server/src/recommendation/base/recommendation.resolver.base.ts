/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Recommendation } from "./Recommendation";
import { RecommendationCountArgs } from "./RecommendationCountArgs";
import { RecommendationFindManyArgs } from "./RecommendationFindManyArgs";
import { RecommendationFindUniqueArgs } from "./RecommendationFindUniqueArgs";
import { DeleteRecommendationArgs } from "./DeleteRecommendationArgs";
import { RecommendationService } from "../recommendation.service";
@graphql.Resolver(() => Recommendation)
export class RecommendationResolverBase {
  constructor(protected readonly service: RecommendationService) {}

  async _recommendationsMeta(
    @graphql.Args() args: RecommendationCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Recommendation])
  async recommendations(
    @graphql.Args() args: RecommendationFindManyArgs
  ): Promise<Recommendation[]> {
    return this.service.recommendations(args);
  }

  @graphql.Query(() => Recommendation, { nullable: true })
  async recommendation(
    @graphql.Args() args: RecommendationFindUniqueArgs
  ): Promise<Recommendation | null> {
    const result = await this.service.recommendation(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Recommendation)
  async deleteRecommendation(
    @graphql.Args() args: DeleteRecommendationArgs
  ): Promise<Recommendation | null> {
    try {
      return await this.service.deleteRecommendation(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
